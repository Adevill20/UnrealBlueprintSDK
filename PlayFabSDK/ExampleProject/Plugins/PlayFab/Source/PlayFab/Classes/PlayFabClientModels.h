#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated model file for the UE4 PlayFab plugin.
// This model file contains the request and response USTRUCTS
//
// API: Client
// SDK Version: 0.0.151130
//////////////////////////////////////////////////////////////////////////////////////////////

#include "Kismet/BlueprintFunctionLibrary.h"
#include "PlayFabClientModels.generated.h"

class UPlayFabJsonObject;

//////////////////////////////////////////////////////////////////////////
// Generated PlayFab Client API Functions
//////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////
// Authentication
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientGetPhotonAuthenticationTokenRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString PhotonApplicationId;

};

USTRUCT(BlueprintType)
struct FClientGetPhotonAuthenticationTokenResult
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString PhotonCustomAuthenticationToken;

};

USTRUCT(BlueprintType)
struct FClientLoginResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique token authorizing the user and game at the server level, for the current session. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString SessionTicket;

    /** Player's unique PlayFabId. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString PlayFabId;

    /** True if the account was newly created on this login. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool NewlyCreated;
    /** Settings specific to this user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        UPlayFabJsonObject* SettingsForUser;
};

USTRUCT(BlueprintType)
struct FClientLoginWithAndroidDeviceIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Android device identifier for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString AndroidDeviceId;

    /** Specific Operating System version for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString OS;

    /** Specific model of the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString AndroidDevice;

    /** Automatically create a PlayFab account if one is not currently linked to this Android device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientLoginWithCustomIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Custom unique identifier for the user, generated by the title. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString CustomId;

    /** Automatically create a PlayFab account if one is not currently linked to this Custom ID. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientLoginWithEmailAddressRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Email address for the account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Email;

    /** Password for the PlayFab account (6-30 characters) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Password;

};

USTRUCT(BlueprintType)
struct FClientLoginWithFacebookRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier from Facebook for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString AccessToken;

    /** Automatically create a PlayFab account if one is not currently linked to this Facebook account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientLoginWithGameCenterRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique Game Center player id. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString PlayerId;

    /** Automatically create a PlayFab account if one is not currently linked to this Game Center id. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientLoginWithGoogleAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique token from Google Play for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString AccessToken;

    /** Automatically create a PlayFab account if one is not currently linked to this Google account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString PublisherId;

};

USTRUCT(BlueprintType)
struct FClientLoginWithIOSDeviceIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Vendor-specific iOS identifier for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString DeviceId;

    /** Specific Operating System version for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString OS;

    /** Specific model of the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString DeviceModel;

    /** Automatically create a PlayFab account if one is not currently linked to this iOS device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientLoginWithKongregateRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier from Kongregate for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString KongregateId;

    /** Token issued by Kongregate's client API for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString AuthTicket;

    /** Automatically create a PlayFab account if one is not currently linked to this Kongregate account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientLoginWithPlayFabRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab username for the account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Username;

    /** Password for the PlayFab account (6-30 characters) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Password;

};

USTRUCT(BlueprintType)
struct FClientLoginWithSteamRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Authentication token for the user, returned as a byte array from Steam, and converted to a string (for example, the byte 0x08 should become "08"). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString SteamTicket;

    /** Automatically create a PlayFab account if one is not currently linked to this Steam account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool CreateAccount;
};

USTRUCT(BlueprintType)
struct FClientRegisterPlayFabUserRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab username for the account (3-20 characters) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Username;

    /** User email address attached to their account */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Email;

    /** Password for the PlayFab account (6-30 characters) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Password;

    /** An optional parameter that specifies whether both the username and email parameters are required. If true, both parameters are required; if false, the user must supply either the username or email parameter. The default value is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        bool RequireBothUsernameAndEmail;
    /** An optional parameter for setting the display name for this title. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString DisplayName;

    /** [Deprecated - The Origination of a user is determined by the API call used to create the account. In the case of RegisterPlayFabUser, it will be Organic. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Origination;

};

USTRUCT(BlueprintType)
struct FClientRegisterPlayFabUserResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab unique identifier for this newly created account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString PlayFabId;

    /** Unique token identifying the user and game at the server level, for the current session. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString SessionTicket;

    /** PlayFab unique user name. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        FString Username;

    /** Settings specific to this user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Authentication Models")
        UPlayFabJsonObject* SettingsForUser;
};



///////////////////////////////////////////////////////
// Account Management
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAddUsernamePasswordRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab username for the account (3-20 characters) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Username;

    /** User email address attached to their account */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Email;

    /** Password for the PlayFab account (6-30 characters) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Password;

};

USTRUCT(BlueprintType)
struct FClientAddUsernamePasswordResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab unique user name. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Username;

};

USTRUCT(BlueprintType)
struct FClientGetAccountInfoRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab identifier of the user whose info is being requested. Optional, defaults to the authenticated user if no other lookup identifier set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString PlayFabId;

    /** PlayFab Username for the account to find (if no PlayFabId is specified). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Username;

    /** User email address for the account to find (if no Username is specified). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Email;

    /** Title-specific username for the account to find (if no Email is set). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString TitleDisplayName;

};

USTRUCT(BlueprintType)
struct FClientGetAccountInfoResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Account information for the local user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        UPlayFabJsonObject* AccountInfo;
};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromFacebookIDsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of unique Facebook identifiers for which the title needs to get PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString FacebookIDs;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromFacebookIDsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Mapping of Facebook identifiers to PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        TArray<UPlayFabJsonObject*> Data;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromGameCenterIDsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of unique Game Center identifiers (the Player Identifier) for which the title needs to get PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString GameCenterIDs;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromGameCenterIDsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Mapping of Game Center identifiers to PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        TArray<UPlayFabJsonObject*> Data;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromGoogleIDsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of unique Google identifiers (Google+ user IDs) for which the title needs to get PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString GoogleIDs;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromGoogleIDsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Mapping of Google identifiers to PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        TArray<UPlayFabJsonObject*> Data;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromSteamIDsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of unique Steam identifiers (Steam profile IDs) for which the title needs to get PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        TArray<int32> SteamIDs;

};

USTRUCT(BlueprintType)
struct FClientGetPlayFabIDsFromSteamIDsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Mapping of Steam identifiers to PlayFab identifiers. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        TArray<UPlayFabJsonObject*> Data;

};

USTRUCT(BlueprintType)
struct FClientGetUserCombinedInfoRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab identifier of the user whose info is being requested. Optional, defaults to the authenticated user if no other lookup identifier set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString PlayFabId;

    /** PlayFab Username for the account to find (if no PlayFabId is specified). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Username;

    /** User email address for the account to find (if no Username is specified). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Email;

    /** Title-specific username for the account to find (if no Email is set). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString TitleDisplayName;

    /** If set to false, account info will not be returned. Defaults to true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        bool GetAccountInfo;
    /** If set to false, inventory will not be returned. Defaults to true. Inventory will never be returned for users other than yourself. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        bool GetInventory;
    /** If set to false, virtual currency balances will not be returned. Defaults to true. Currency balances will never be returned for users other than yourself. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        bool GetVirtualCurrency;
    /** If set to false, custom user data will not be returned. Defaults to true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        bool GetUserData;
    /** User custom data keys to return. If set to null, all keys will be returned. For users other than yourself, only public data will be returned. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString UserDataKeys;

    /** If set to false, read-only user data will not be returned. Defaults to true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        bool GetReadOnlyData;
    /** User read-only custom data keys to return. If set to null, all keys will be returned. For users other than yourself, only public data will be returned. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString ReadOnlyDataKeys;

};

USTRUCT(BlueprintType)
struct FClientGetUserCombinedInfoResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab identifier of the owner of the combined info. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString PlayFabId;

    /** Account information for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        UPlayFabJsonObject* AccountInfo;
    /** Array of inventory items in the user's current inventory. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        TArray<UPlayFabJsonObject*> Inventory;

    /** Array of virtual currency balance(s) belonging to the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        UPlayFabJsonObject* VirtualCurrency;

    /** Array of remaining times and timestamps for virtual currencies. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        UPlayFabJsonObject* VirtualCurrencyRechargeTimes;

    /** User specific custom data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        UPlayFabJsonObject* Data;

    /** The version of the UserData that was returned. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        int32 DataVersion;
    /** User specific read-only data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        UPlayFabJsonObject* ReadOnlyData;

    /** The version of the Read-Only UserData that was returned. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        int32 ReadOnlyDataVersion;
};

USTRUCT(BlueprintType)
struct FClientLinkAndroidDeviceIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Android device identifier for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString AndroidDeviceId;

    /** Specific Operating System version for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString OS;

    /** Specific model of the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString AndroidDevice;

};

USTRUCT(BlueprintType)
struct FClientLinkAndroidDeviceIDResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkCustomIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Custom unique identifier for the user, generated by the title. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString CustomId;

};

USTRUCT(BlueprintType)
struct FClientLinkCustomIDResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkFacebookAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier from Facebook for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString AccessToken;

    /** If this Facebook account is already linked to a Playfab account, this will unlink the old account before linking the new one. Be careful when using this call, as it may orphan the old account. Defaults to false. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        bool ForceLink;
};

USTRUCT(BlueprintType)
struct FClientLinkFacebookAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkGameCenterAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Game Center identifier for the player account to be linked. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString GameCenterId;

};

USTRUCT(BlueprintType)
struct FClientLinkGameCenterAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkGoogleAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique token from Google Play for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString AccessToken;

};

USTRUCT(BlueprintType)
struct FClientLinkGoogleAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkIOSDeviceIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Vendor-specific iOS identifier for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString DeviceId;

    /** Specific Operating System version for the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString OS;

    /** Specific model of the user's device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString DeviceModel;

};

USTRUCT(BlueprintType)
struct FClientLinkIOSDeviceIDResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkKongregateAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Numeric user ID assigned by Kongregate */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString KongregateId;

    /** Valid session auth ticket issued by Kongregate */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString AuthTicket;

};

USTRUCT(BlueprintType)
struct FClientLinkKongregateAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientLinkSteamAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Authentication token for the user, returned as a byte array from Steam, and converted to a string (for example, the byte 0x08 should become "08"). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString SteamTicket;

};

USTRUCT(BlueprintType)
struct FClientLinkSteamAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientSendAccountRecoveryEmailRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** User email address attached to their account */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString Email;

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString PublisherId;

};

USTRUCT(BlueprintType)
struct FClientSendAccountRecoveryEmailResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkAndroidDeviceIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Android device identifier for the user's device. If not specified, the most recently signed in Android Device ID will be used. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString AndroidDeviceId;

};

USTRUCT(BlueprintType)
struct FClientUnlinkAndroidDeviceIDResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkCustomIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Custom unique identifier for the user, generated by the title. If not specified, the most recently signed in Custom ID will be used. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString CustomId;

};

USTRUCT(BlueprintType)
struct FClientUnlinkCustomIDResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkFacebookAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkFacebookAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkGameCenterAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkGameCenterAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkGoogleAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkGoogleAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkIOSDeviceIDRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Vendor-specific iOS identifier for the user's device. If not specified, the most recently signed in iOS Device ID will be used. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString DeviceId;

};

USTRUCT(BlueprintType)
struct FClientUnlinkIOSDeviceIDResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkKongregateAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkKongregateAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkSteamAccountRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUnlinkSteamAccountResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUpdateUserTitleDisplayNameRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** New title display name for the user - must be between 3 and 25 characters. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString DisplayName;

};

USTRUCT(BlueprintType)
struct FClientUpdateUserTitleDisplayNameResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Current title display name for the user (this will be the original display name if the rename attempt failed). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Account Management Models")
        FString DisplayName;

};



///////////////////////////////////////////////////////
// Player Data Management
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientGetFriendLeaderboardRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Statistic used to rank friends for this leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString StatisticName;

    /** Position in the leaderboard to start this listing (defaults to the first entry). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 StartPosition;
    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 MaxResultsCount;
    /** Indicates whether Steam service friends should be included in the response. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        bool IncludeSteamFriends;
    /** Indicates whether Facebook friends should be included in the response. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        bool IncludeFacebookFriends;
};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Ordered listing of users and their positions in the requested leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        TArray<UPlayFabJsonObject*> Leaderboard;

};

USTRUCT(BlueprintType)
struct FClientGetFriendLeaderboardAroundCurrentUserRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Statistic used to rank players for this leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString StatisticName;

    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 MaxResultsCount;
    /** Indicates whether Steam service friends should be included in the response. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        bool IncludeSteamFriends;
    /** Indicates whether Facebook friends should be included in the response. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        bool IncludeFacebookFriends;
};

USTRUCT(BlueprintType)
struct FClientGetFriendLeaderboardAroundCurrentUserResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Ordered listing of users and their positions in the requested leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        TArray<UPlayFabJsonObject*> Leaderboard;

};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Statistic used to rank players for this leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString StatisticName;

    /** Position in the leaderboard to start this listing (defaults to the first entry). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 StartPosition;
    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 MaxResultsCount;
};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardAroundCurrentUserRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Statistic used to rank players for this leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString StatisticName;

    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 MaxResultsCount;
};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardAroundCurrentUserResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Ordered listing of users and their positions in the requested leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        TArray<UPlayFabJsonObject*> Leaderboard;

};

USTRUCT(BlueprintType)
struct FClientGetUserDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Specific keys to search for in the custom data. Leave null to get all keys. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString Keys;

    /** Unique PlayFab identifier of the user to load data for. Optional, defaults to yourself if not set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString PlayFabId;

    /** The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 IfChangedFromDataVersion;
};

USTRUCT(BlueprintType)
struct FClientGetUserDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** User specific data for this title. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        UPlayFabJsonObject* Data;

    /** Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 DataVersion;
};

USTRUCT(BlueprintType)
struct FClientGetUserStatisticsRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientGetUserStatisticsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** User statistics for the active title. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        UPlayFabJsonObject* Statistics;

};

USTRUCT(BlueprintType)
struct FClientUpdateUserDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        UPlayFabJsonObject* Data;

    /** Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        FString KeysToRemove;

    /** Permission to be applied to all user data keys written in this request. Defaults to "private" if not set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        EPermissionEnum Permission;

};

USTRUCT(BlueprintType)
struct FClientUpdateUserDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        int32 DataVersion;
};

USTRUCT(BlueprintType)
struct FClientUpdateUserStatisticsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Statistics to be updated with the provided values. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Data Management Models")
        UPlayFabJsonObject* UserStatistics;

};

USTRUCT(BlueprintType)
struct FClientUpdateUserStatisticsResult
{
    GENERATED_USTRUCT_BODY()

public:

};



///////////////////////////////////////////////////////
// Title-Wide Data Management
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientGetCatalogItemsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Which catalog is being requested. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        FString CatalogVersion;

};

USTRUCT(BlueprintType)
struct FClientGetCatalogItemsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of inventory objects. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        TArray<UPlayFabJsonObject*> Catalog;

};

USTRUCT(BlueprintType)
struct FClientGetStoreItemsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unqiue identifier for the store which is being requested. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        FString StoreId;

    /** Catalog version for the requested store items. If null, defaults to most recent catalog. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        FString CatalogVersion;

};

USTRUCT(BlueprintType)
struct FClientGetStoreItemsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of store items. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        TArray<UPlayFabJsonObject*> Store;

};

USTRUCT(BlueprintType)
struct FClientGetTitleDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Specific keys to search for in the title data (leave null to get all keys) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        FString Keys;

};

USTRUCT(BlueprintType)
struct FClientGetTitleDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** a dictionary object of key / value pairs */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        UPlayFabJsonObject* Data;

};

USTRUCT(BlueprintType)
struct FClientGetTitleNewsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Limits the results to the last n entries. Defaults to 10 if not set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        int32 Count;
};

USTRUCT(BlueprintType)
struct FClientGetTitleNewsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of news items. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Title-Wide Data Management Models")
        TArray<UPlayFabJsonObject*> News;

};



///////////////////////////////////////////////////////
// Player Item Management
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAddUserVirtualCurrencyRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Name of the virtual currency which is to be incremented. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString VirtualCurrency;

    /** Amount to be added to the user balance of the specified virtual currency. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 Amount;
};

USTRUCT(BlueprintType)
struct FClientModifyUserVirtualCurrencyResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** User currency was subtracted from. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PlayFabId;

    /** Name of the virtual currency which was modified. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString VirtualCurrency;

    /** Amount added or subtracted from the user's virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 BalanceChange;
    /** Balance of the virtual currency after modification. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 Balance;
};

USTRUCT(BlueprintType)
struct FClientConfirmPurchaseRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier returned from StartPurchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

};

USTRUCT(BlueprintType)
struct FClientConfirmPurchaseResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

    /** Date and time of the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PurchaseDate;

    /** Array of items purchased. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Items;

};

USTRUCT(BlueprintType)
struct FClientConsumeItemRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique instance identifier of the item to be consumed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ItemInstanceId;

    /** Number of uses to consume from the item. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 ConsumeCount;
    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CharacterId;

};

USTRUCT(BlueprintType)
struct FClientConsumeItemResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique instance identifier of the item with uses consumed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ItemInstanceId;

    /** Number of uses remaining on the item. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 RemainingUses;
};

USTRUCT(BlueprintType)
struct FClientGetCharacterInventoryRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab assigned ID of the user on whom the operation will be performed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PlayFabId;

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CharacterId;

    /** Used to limit results to only those from a specific catalog version. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CatalogVersion;

};

USTRUCT(BlueprintType)
struct FClientGetCharacterInventoryResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab unique identifier of the user whose character inventory is being returned. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PlayFabId;

    /** Unique identifier of the character for this inventory. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CharacterId;

    /** Array of inventory items belonging to the character. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Inventory;

    /** Array of virtual currency balance(s) belonging to the character. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrency;

    /** Array of remaining times and timestamps for virtual currencies. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrencyRechargeTimes;

};

USTRUCT(BlueprintType)
struct FClientGetPurchaseRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

};

USTRUCT(BlueprintType)
struct FClientGetPurchaseResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

    /** Payment provider used for transaction (If not VC) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PaymentProvider;

    /** Provider transaction ID (If not VC) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString TransactionId;

    /** PlayFab transaction status */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString TransactionStatus;

    /** Date and time of the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PurchaseDate;

    /** Array of items purchased. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Items;

};

USTRUCT(BlueprintType)
struct FClientGetUserInventoryRequest
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientGetUserInventoryResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of inventory items in the user's current inventory. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Inventory;

    /** Array of virtual currency balance(s) belonging to the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrency;

    /** Array of remaining times and timestamps for virtual currencies. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrencyRechargeTimes;

};

USTRUCT(BlueprintType)
struct FClientPayForPurchaseRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier returned from StartPurchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

    /** Payment provider to use to fund the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ProviderName;

    /** Currency to use to fund the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString Currency;

    /** Payment provider transaction identifier. Required for Facebook Payments. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ProviderTransactionId;

};

USTRUCT(BlueprintType)
struct FClientPayForPurchaseResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

    /** Status of the transaction. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString Status;

    /** Virtual currency cost of the transaction. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VCAmount;

    /** Real world currency for the transaction. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PurchaseCurrency;

    /** Real world cost of the transaction. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 PurchasePrice;
    /** Local credit applied to the transaction (provider specific). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 CreditApplied;
    /** Provider used for the transaction. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ProviderData;

    /** URL to the purchase provider page that details the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString PurchaseConfirmationPageURL;

    /** Current virtual currency totals for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrency;

};

USTRUCT(BlueprintType)
struct FClientPurchaseItemRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier of the item to purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ItemId;

    /** Virtual currency to use to purchase the item. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString VirtualCurrency;

    /** Price the client expects to pay for the item (in case a new catalog or store was uploaded, with new prices). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 Price;
    /** Catalog version for the items to be purchased (defaults to most recent version. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CatalogVersion;

    /** Store to buy this item through. If not set, prices default to those in the catalog. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString StoreId;

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CharacterId;

};

USTRUCT(BlueprintType)
struct FClientPurchaseItemResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Details for the items purchased. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Items;

};

USTRUCT(BlueprintType)
struct FClientRedeemCouponRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Generated coupon code to redeem. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CouponCode;

    /** Catalog version of the coupon. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CatalogVersion;

};

USTRUCT(BlueprintType)
struct FClientRedeemCouponResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Items granted to the player as a result of redeeming the coupon. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> GrantedItems;

};

USTRUCT(BlueprintType)
struct FClientReportPlayerClientRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab identifier of the reported player. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ReporteeId;

    /** Optional additional comment by reporting player. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString Comment;

};

USTRUCT(BlueprintType)
struct FClientReportPlayerClientResult
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        bool Updated;
    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 SubmissionsRemaining;
};

USTRUCT(BlueprintType)
struct FClientStartPurchaseRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Catalog version for the items to be purchased. Defaults to most recent catalog. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CatalogVersion;

    /** Store through which to purchase items. If not set, prices will be pulled from the catalog itself. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString StoreId;

    /** Array of items to purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Items;

};

USTRUCT(BlueprintType)
struct FClientStartPurchaseResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Purchase order identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString OrderId;

    /** Cart items to be purchased. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> Contents;

    /** Available methods by which the user can pay. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> PaymentOptions;

    /** Current virtual currency totals for the user. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrencyBalances;

};

USTRUCT(BlueprintType)
struct FClientSubtractUserVirtualCurrencyRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Name of the virtual currency which is to be decremented. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString VirtualCurrency;

    /** Amount to be subtracted from the user balance of the specified virtual currency. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        int32 Amount;
};

USTRUCT(BlueprintType)
struct FClientUnlockContainerItemRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Category ItemId of the container type to unlock. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString ContainerItemId;

    /** Catalog version of the container. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CatalogVersion;

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString CharacterId;

};

USTRUCT(BlueprintType)
struct FClientUnlockContainerItemResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique instance identifier of the container unlocked. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString UnlockedItemInstanceId;

    /** Unique instance identifier of the key used to unlock the container, if applicable. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        FString UnlockedWithItemInstanceId;

    /** Items granted to the player as a result of unlocking the container. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        TArray<UPlayFabJsonObject*> GrantedItems;

    /** Virtual currency granted to the player as a result of unlocking the container. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Player Item Management Models")
        UPlayFabJsonObject* VirtualCurrency;

};



///////////////////////////////////////////////////////
// Friend List Management
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAddFriendRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab identifier of the user to attempt to add to the local user's friend list. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString FriendPlayFabId;

    /** PlayFab username of the user to attempt to add to the local user's friend list. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString FriendUsername;

    /** Email address of the user to attempt to add to the local user's friend list. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString FriendEmail;

    /** Title-specific display name of the user to attempt to add to the local user's friend list. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString FriendTitleDisplayName;

};

USTRUCT(BlueprintType)
struct FClientAddFriendResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** True if the friend request was processed successfully. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        bool Created;
};

USTRUCT(BlueprintType)
struct FClientGetFriendsListRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Indicates whether Steam service friends should be included in the response. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        bool IncludeSteamFriends;
    /** Indicates whether Facebook friends should be included in the response. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        bool IncludeFacebookFriends;
};

USTRUCT(BlueprintType)
struct FClientGetFriendsListResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Array of friends found. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        TArray<UPlayFabJsonObject*> Friends;

};

USTRUCT(BlueprintType)
struct FClientRemoveFriendRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab identifier of the friend account which is to be removed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString FriendPlayFabId;

};

USTRUCT(BlueprintType)
struct FClientRemoveFriendResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientSetFriendTagsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** PlayFab identifier of the friend account to which the tag(s) should be applied. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString FriendPlayFabId;

    /** Array of tags to set on the friend account. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Friend List Management Models")
        FString Tags;

};

USTRUCT(BlueprintType)
struct FClientSetFriendTagsResult
{
    GENERATED_USTRUCT_BODY()

public:

};



///////////////////////////////////////////////////////
// IOS-Specific APIs
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientRegisterForIOSPushNotificationRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique token generated by the Apple Push Notification service when the title registered to receive push notifications. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        FString DeviceToken;

    /** If true, send a test push message immediately after sucessful registration. Defaults to false. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        bool SendPushNotificationConfirmation;
    /** Message to display when confirming push notification. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        FString ConfirmationMessage;

};

USTRUCT(BlueprintType)
struct FClientRegisterForIOSPushNotificationResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientRestoreIOSPurchasesRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Base64 encoded receipt data, passed back by the App Store as a result of a successful purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        FString ReceiptData;

};

USTRUCT(BlueprintType)
struct FClientRestoreIOSPurchasesResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientValidateIOSReceiptRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Base64 encoded receipt data, passed back by the App Store as a result of a successful purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        FString ReceiptData;

    /** Currency used for the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        FString CurrencyCode;

    /** Amount of the stated currency paid for the object. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | IOS-Specific APIs Models")
        int32 PurchasePrice;
};

USTRUCT(BlueprintType)
struct FClientValidateIOSReceiptResult
{
    GENERATED_USTRUCT_BODY()

public:

};



///////////////////////////////////////////////////////
// Matchmaking APIs
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientCurrentGamesRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** region to check for game instances */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Region;

    /** version of build to match against */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString BuildVersion;

    /** game mode to look for (optional) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString GameMode;

    /** statistic name to find statistic-based matches (optional) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString StatisticName;

};

USTRUCT(BlueprintType)
struct FClientCurrentGamesResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** array of games found */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        TArray<UPlayFabJsonObject*> Games;

    /** total number of players across all servers */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        int32 PlayerCount;
    /** number of games running */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        int32 GameCount;
};

USTRUCT(BlueprintType)
struct FClientGameServerRegionsRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** version of game server for which stats are being requested */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString BuildVersion;

};

USTRUCT(BlueprintType)
struct FClientGameServerRegionsResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** array of regions found matching the request parameters */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        TArray<UPlayFabJsonObject*> Regions;

};

USTRUCT(BlueprintType)
struct FClientMatchmakeRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** build version to match against */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString BuildVersion;

    /** region to match make against */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Region;

    /** game mode to match make against */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString GameMode;

    /** lobby identifier to match make against (used to select a specific server) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString LobbyId;

    /** player statistic to use in finding a match. May be null for no stat-based matching */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString StatisticName;

    /** character to use for stats based matching. Leave null to use account stats */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString CharacterId;

    /** [deprecated] */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        bool EnableQueue;
};

USTRUCT(BlueprintType)
struct FClientMatchmakeResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** unique lobby identifier of the server matched */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString LobbyID;

    /** IP address of the server */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString ServerHostname;

    /** port number to use for non-http communications with the server */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        int32 ServerPort;
    /** server authorization ticket (used by RedeemCoupon to validate user insertion into the game) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Ticket;

    /** timestamp for when the server will expire, if applicable */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Expires;

    /** time in milliseconds the application is configured to wait on matchmaking results */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        int32 PollWaitTimeMS;
    /** result of match making process */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Status;

};

USTRUCT(BlueprintType)
struct FClientStartGameRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** version information for the build of the game server which is to be started */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString BuildVersion;

    /** the region to associate this server with for match filtering */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Region;

    /** the title-defined game mode this server is to be running (defaults to 0 if there is only one mode) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString GameMode;

    /** player statistic for others to use in finding this game. May be null for no stat-based matching */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString StatisticName;

    /** character to use for stats based matching. Leave null to use account stats */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString CharacterId;

    /** custom command line argument when starting game server process */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString CustomCommandLineData;

};

USTRUCT(BlueprintType)
struct FClientStartGameResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** unique identifier for the lobby of the server started */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString LobbyID;

    /** server IP address */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString ServerHostname;

    /** port on the server to be used for communication */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        int32 ServerPort;
    /** unique identifier for the server */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Ticket;

    /** timestamp for when the server should expire, if applicable */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Expires;

    /** password required to log into the server */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Matchmaking APIs Models")
        FString Password;

};



///////////////////////////////////////////////////////
// Android-Specific APIs
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAndroidDevicePushNotificationRegistrationRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Registration ID provided by the Google Cloud Messaging service when the title registered to receive push notifications (see the GCM documentation, here: http://developer.android.com/google/gcm/client.html). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        FString DeviceToken;

    /** If true, send a test push message immediately after sucessful registration. Defaults to false. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        bool SendPushNotificationConfirmation;
    /** Message to display when confirming push notification. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        FString ConfirmationMessege;

};

USTRUCT(BlueprintType)
struct FClientAndroidDevicePushNotificationRegistrationResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientValidateGooglePlayPurchaseRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Original JSON string returned by the Google Play IAB API. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        FString ReceiptJson;

    /** Signature returned by the Google Play IAB API. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        FString Signature;

    /** Currency used for the purchase. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        FString CurrencyCode;

    /** Amount of the stated currency paid for the object. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Android-Specific APIs Models")
        int32 PurchasePrice;
};

USTRUCT(BlueprintType)
struct FClientValidateGooglePlayPurchaseResult
{
    GENERATED_USTRUCT_BODY()

public:

};



///////////////////////////////////////////////////////
// Analytics
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientLogEventRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Optional timestamp for this event. If null, the a timestamp is auto-assigned to the event on the server. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Analytics Models")
        FString Timestamp;

    /** A unique event name which will be used as the table name in the Redshift database. The name will be made lower case, and cannot not contain spaces. The use of underscores is recommended, for readability. Events also cannot match reserved terms. The PlayFab reserved terms are 'log_in' and 'purchase', 'create' and 'request', while the Redshift reserved terms can be found here: http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Analytics Models")
        FString EventName;

    /** Contains all the data for this event. Event Values can be strings, booleans or numerics (float, double, integer, long) and must be consistent on a per-event basis (if the Value for Key 'A' in Event 'Foo' is an integer the first time it is sent, it must be an integer in all subsequent 'Foo' events). As with event names, Keys must also not use reserved words (see above). Finally, the size of the Body for an event must be less than 32KB (UTF-8 format). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Analytics Models")
        UPlayFabJsonObject* Body;

    /** Flag to set event Body as profile details in the Redshift database as well as a standard event. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Analytics Models")
        bool ProfileSetEvent;
};

USTRUCT(BlueprintType)
struct FClientLogEventResult
{
    GENERATED_USTRUCT_BODY()

public:

};



///////////////////////////////////////////////////////
// Shared Group Data
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAddSharedGroupMembersRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the shared group. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString SharedGroupId;

    /** An array of unique PlayFab assigned ID of the user on whom the operation will be performed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString PlayFabIds;

};

USTRUCT(BlueprintType)
struct FClientAddSharedGroupMembersResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientCreateSharedGroupRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the shared group (a random identifier will be assigned, if one is not specified). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString SharedGroupId;

};

USTRUCT(BlueprintType)
struct FClientCreateSharedGroupResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the shared group. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString SharedGroupId;

};

USTRUCT(BlueprintType)
struct FClientGetPublisherDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /**  array of keys to get back data from the Publisher data blob, set by the admin tools */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString Keys;

};

USTRUCT(BlueprintType)
struct FClientGetPublisherDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** a dictionary object of key / value pairs */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        UPlayFabJsonObject* Data;

};

USTRUCT(BlueprintType)
struct FClientGetSharedGroupDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the shared group. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString SharedGroupId;

    /** Specific keys to retrieve from the shared group (if not specified, all keys will be returned, while an empty array indicates that no keys should be returned). */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString Keys;

    /** If true, return the list of all members of the shared group. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        bool GetMembers;
};

USTRUCT(BlueprintType)
struct FClientGetSharedGroupDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Data for the requested keys. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        UPlayFabJsonObject* Data;

    /** List of PlayFabId identifiers for the members of this group, if requested. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString Members;

};

USTRUCT(BlueprintType)
struct FClientRemoveSharedGroupMembersRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the shared group. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString SharedGroupId;

    /** An array of unique PlayFab assigned ID of the user on whom the operation will be performed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString PlayFabIds;

};

USTRUCT(BlueprintType)
struct FClientRemoveSharedGroupMembersResult
{
    GENERATED_USTRUCT_BODY()

public:

};

USTRUCT(BlueprintType)
struct FClientUpdateSharedGroupDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the shared group. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString SharedGroupId;

    /** Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        UPlayFabJsonObject* Data;

    /** Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        FString KeysToRemove;

    /** Permission to be applied to all user data keys in this request. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Shared Group Data Models")
        EPermissionEnum Permission;

};

USTRUCT(BlueprintType)
struct FClientUpdateSharedGroupDataResult
{
    GENERATED_USTRUCT_BODY()

public:

};



///////////////////////////////////////////////////////
// Sony-specific APIs
//////////////////////////////////////////////////////



///////////////////////////////////////////////////////
// Server-Side Cloud Script
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientGetCloudScriptUrlRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Cloud Script Version to use. Defaults to 1. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        int32 Version;
    /** Specifies whether the URL returned should be the one for the most recently uploaded Revision of the Cloud Script (true), or the Revision most recently set to live (false). Defaults to false. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        bool Testing;
};

USTRUCT(BlueprintType)
struct FClientGetCloudScriptUrlResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** URL of the Cloud Script logic server. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        FString Url;

};

USTRUCT(BlueprintType)
struct FClientRunCloudScriptRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** server action to trigger */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        FString ActionId;

    /** parameters to pass into the action (If you use this, don't use ParamsEncoded) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        UPlayFabJsonObject* Params;
    /** json-encoded parameters to pass into the action (If you use this, don't use Params) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        FString ParamsEncoded;

};

USTRUCT(BlueprintType)
struct FClientRunCloudScriptResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** id of Cloud Script run */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        FString ActionId;

    /** version of Cloud Script run */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        int32 Version;
    /** revision of Cloud Script run */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        int32 Revision;
    /** return values from the server action as a dynamic object */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        UPlayFabJsonObject* Results;
    /** return values from the server action as a JSON encoded string */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        FString ResultsEncoded;

    /** any log statements generated during the run of this action */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        FString ActionLog;

    /** time this script took to run, in seconds */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Server-Side Cloud Script Models")
        int32 ExecutionTime;
};



///////////////////////////////////////////////////////
// Content
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientGetContentDownloadUrlRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Key of the content item to fetch, usually formatted as a path, e.g. images/a.png */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Content Models")
        FString Key;

    /** HTTP method to fetch item - GET or HEAD. Use HEAD when only fetching metadata. Default is GET. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Content Models")
        FString HttpMethod;

    /** True if download through CDN. CDN provides better download bandwidth and time. However, if you want latest, non-cached version of the content, set this to false. Default is true. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Content Models")
        bool ThruCDN;
};

USTRUCT(BlueprintType)
struct FClientGetContentDownloadUrlResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** URL for downloading content via HTTP GET or HEAD method. The URL will expire in 1 hour. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Content Models")
        FString URL;

};



///////////////////////////////////////////////////////
// Characters
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientListUsersCharactersRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab assigned ID of the user on whom the operation will be performed. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString PlayFabId;

};

USTRUCT(BlueprintType)
struct FClientListUsersCharactersResult
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        TArray<UPlayFabJsonObject*> Characters;

};

USTRUCT(BlueprintType)
struct FClientGetCharacterLeaderboardRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Optional character type on which to filter the leaderboard entries. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CharacterType;

    /** Unique identifier for the title-specific statistic for the leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString StatisticName;

    /** First entry in the leaderboard to be retrieved. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        int32 StartPosition;
    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        int32 MaxResultsCount;
};

USTRUCT(BlueprintType)
struct FClientGetCharacterLeaderboardResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Ordered list of leaderboard entries. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        TArray<UPlayFabJsonObject*> Leaderboard;

};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardAroundCharacterRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the title-specific statistic for the leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString StatisticName;

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CharacterId;

    /** Optional character type on which to filter the leaderboard entries. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CharacterType;

    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        int32 MaxResultsCount;
};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardAroundCharacterResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Ordered list of leaderboard entries. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        TArray<UPlayFabJsonObject*> Leaderboard;

};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardForUsersCharactersRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier for the title-specific statistic for the leaderboard. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString StatisticName;

    /** Maximum number of entries to retrieve. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        int32 MaxResultsCount;
};

USTRUCT(BlueprintType)
struct FClientGetLeaderboardForUsersCharactersResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Ordered list of leaderboard entries. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        TArray<UPlayFabJsonObject*> Leaderboard;

};

USTRUCT(BlueprintType)
struct FClientGrantCharacterToUserRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Catalog version from which items are to be granted. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CatalogVersion;

    /** Catalog item identifier of the item in the user's inventory that corresponds to the character in the catalog to be created. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString ItemId;

    /** Non-unique display name of the character being granted. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CharacterName;

};

USTRUCT(BlueprintType)
struct FClientGrantCharacterToUserResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique identifier tagged to this character. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CharacterId;

    /** Type of character that was created. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        FString CharacterType;

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Characters Models")
        bool Result;
};



///////////////////////////////////////////////////////
// Character Data
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientGetCharacterDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab identifier of the user to load data for. Optional, defaults to yourself if not set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        FString PlayFabId;

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        FString CharacterId;

    /** Specific keys to search for in the custom user data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        FString Keys;

    /** The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        int32 IfChangedFromDataVersion;
};

USTRUCT(BlueprintType)
struct FClientGetCharacterDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        FString CharacterId;

    /** User specific data for this title. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        UPlayFabJsonObject* Data;

    /** Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        int32 DataVersion;
};

USTRUCT(BlueprintType)
struct FClientUpdateCharacterDataRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Unique PlayFab assigned ID for a specific character owned by a user */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        FString CharacterId;

    /** Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        UPlayFabJsonObject* Data;

    /** Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        FString KeysToRemove;

    /** Permission to be applied to all user data keys written in this request. Defaults to "private" if not set. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        EPermissionEnum Permission;

};

USTRUCT(BlueprintType)
struct FClientUpdateCharacterDataResult
{
    GENERATED_USTRUCT_BODY()

public:

    /** Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Character Data Models")
        int32 DataVersion;
};



///////////////////////////////////////////////////////
// Amazon-Specific APIs
//////////////////////////////////////////////////////



///////////////////////////////////////////////////////
// Trading
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAcceptTradeRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Player who opened trade. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString OfferingPlayerId;

    /** Trade identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString TradeId;

    /** Items from the accepting player's inventory in exchange for the offered items in the trade. In the case of a gift, this will be null. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString AcceptedInventoryInstanceIds;

};

USTRUCT(BlueprintType)
struct FClientAcceptTradeResponse
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        UPlayFabJsonObject* Trade;
};

USTRUCT(BlueprintType)
struct FClientCancelTradeRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Trade identifier. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString TradeId;

};

USTRUCT(BlueprintType)
struct FClientCancelTradeResponse
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        UPlayFabJsonObject* Trade;
};

USTRUCT(BlueprintType)
struct FClientGetPlayerTradesRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Returns only trades with the given status. If null, returns all trades. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString StatusFilter;

};

USTRUCT(BlueprintType)
struct FClientGetPlayerTradesResponse
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        TArray<UPlayFabJsonObject*> OpenedTrades;

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        TArray<UPlayFabJsonObject*> AcceptedTrades;

};

USTRUCT(BlueprintType)
struct FClientGetTradeStatusRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Player who opened trade. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString OfferingPlayerId;

    /** Trade identifier as returned by OpenTradeOffer. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString TradeId;

};

USTRUCT(BlueprintType)
struct FClientGetTradeStatusResponse
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        UPlayFabJsonObject* Trade;
};

USTRUCT(BlueprintType)
struct FClientOpenTradeRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** Player inventory items offered for trade. If not set, the trade is effectively a gift request */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString OfferedInventoryInstanceIds;

    /** Catalog items accepted for the trade. If not set, the trade is effectively a gift. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString RequestedCatalogItemIds;

    /** Players who are allowed to accept the trade. If null, the trade may be accepted by any player. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        FString AllowedPlayerIds;

};

USTRUCT(BlueprintType)
struct FClientOpenTradeResponse
{
    GENERATED_USTRUCT_BODY()

public:

    /**  */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Trading Models")
        UPlayFabJsonObject* Trade;
};



///////////////////////////////////////////////////////
// Advertising
//////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FClientAttributeInstallRequest
{
    GENERATED_USTRUCT_BODY()

public:

    /** The IdentifierForAdvertisers for iOS Devices. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Advertising Models")
        FString Idfa;

    /** The Android Id for this Android device. */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PlayFab | Client | Advertising Models")
        FString Android_Id;

};

USTRUCT(BlueprintType)
struct FClientAttributeInstallResult
{
    GENERATED_USTRUCT_BODY()

public:

};


